{
  "hash": "392f0aa4ec026209428bbfbacd6de43d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Coding in Python\ndescription: Learn Python fundamentals including variables, data types, and built-in functions\ndate: last-modified\nexecute:\n  eval: true\nauthors-ipa:\n  - '[Kwadwo Agyapon-Ntra](https://poverty-action.org/people/kwadwo-agyapon-ntra)'\n---\n\n:::{.callout-note collapse=\"true\"}\n## Recognition and Attribution\nThis page modifies content from the [Software Carpentry Python Fundamentals lesson](https://swcarpentry.github.io/python-novice-inflammation/01-intro.html).\n:::\n\nIn this tutorial, you will learn the fundamentals of Python programming. We'll cover variables, data types, and how to use built-in functions to perform basic operations.\n\n## Learning Objectives\n\nBy the end of this tutorial, you will be able to:\n\n- Assign values to variables\n- Understand basic data types in Python\n- Use built-in Python functions\n- Get help while programming\n\n## Variables\n\nA variable is a name for a value. In Python, variables are created when you assign a value to them using the `=` sign.\n\n::: {#fe7d7719 .cell execution_count=1}\n``` {.python .cell-code}\nweight_kg = 60.3\n```\n:::\n\n\nIn this example, we've created a variable called `weight_kg` and assigned it the value `60.3`.\n\nOnce a variable has been created, we can use it in calculations:\n\n::: {#98497e15 .cell execution_count=2}\n``` {.python .cell-code}\nprint(weight_kg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n60.3\n```\n:::\n:::\n\n\nWe can also do arithmetic with variables:\n\n::: {#60417792 .cell execution_count=3}\n``` {.python .cell-code}\nprint('weight in pounds:', 2.2 * weight_kg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nweight in pounds: 132.66\n```\n:::\n:::\n\n\n### Variable Names\n\nVariable names can contain letters, digits, and underscores. However, they:\n\n- Cannot start with a digit\n- Are case-sensitive\n\n::: {#ff946196 .cell execution_count=4}\n``` {.python .cell-code}\n# Valid variable names\npatient_id = 'inflam_001'\npatient_weight = 75.0\npatient1_age = 45\n\n# Display the variables\nprint('Patient ID:', patient_id)\nprint('Patient weight:', patient_weight, 'kg')\nprint('Patient age:', patient1_age, 'years')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPatient ID: inflam_001\nPatient weight: 75.0 kg\nPatient age: 45 years\n```\n:::\n:::\n\n\n### Changing Variables\n\nWe can change the value of a variable by assigning it a new value:\n\n::: {#d539439f .cell execution_count=5}\n``` {.python .cell-code}\nweight_kg = 60.3\nprint('weight in kilograms:', weight_kg)\n\nweight_kg = 65.0\nprint('weight in kilograms is now:', weight_kg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nweight in kilograms: 60.3\nweight in kilograms is now: 65.0\n```\n:::\n:::\n\n\nNotice that when we assign a new value to a variable, it does not change other variables that might have used the old value:\n\n::: {#16b0c0b6 .cell execution_count=6}\n``` {.python .cell-code}\nweight_kg = 60.3\nweight_lb = 2.2 * weight_kg\nprint('weight in kilograms:', weight_kg, 'and in pounds:', weight_lb)\n\nweight_kg = 65.0\nprint('weight in kilograms is now:', weight_kg, 'and weight in pounds is still:', weight_lb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nweight in kilograms: 60.3 and in pounds: 132.66\nweight in kilograms is now: 65.0 and weight in pounds is still: 132.66\n```\n:::\n:::\n\n\n## Data Types\n\nEvery value in Python has a specific type. Three common types are:\n\n1. **Integer numbers** (whole numbers)\n2. **Floating point numbers** (numbers with decimals)\n3. **Strings** (text)\n\n::: {.callout-note}\nThere are many other data types, eg. `bool`, `list`, `set`, which you will discover as you progress.\n:::\n\n::: {#011287a5 .cell execution_count=7}\n``` {.python .cell-code}\n# Examples of different data types\npatient_age = 25          # integer\npatient_weight = 68.5     # float\npatient_name = 'Alice'    # string\n\nprint('Patient name:', patient_name)\nprint('Patient age:', patient_age)\nprint('Patient weight:', patient_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPatient name: Alice\nPatient age: 25\nPatient weight: 68.5\n```\n:::\n:::\n\n\n### Finding the Type of a Variable\n\nWe can use the built-in function `type()` to find out what type a value has:\n\n::: {#0f4e6b06 .cell execution_count=8}\n``` {.python .cell-code}\nprint(type(60.3))\nprint(type('hello world'))\nprint(type(25))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'float'>\n<class 'str'>\n<class 'int'>\n```\n:::\n:::\n\n\n### Working with Strings\n\nStrings must be enclosed in quotes (either single or double):\n\n::: {#c75bb1e9 .cell execution_count=9}\n``` {.python .cell-code}\npatient_id = 'inflam_001'\npatient_name = \"John Doe\"\n\nprint('Patient ID:', patient_id)\nprint('Patient name:', patient_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPatient ID: inflam_001\nPatient name: John Doe\n```\n:::\n:::\n\n\nWe can add strings together (concatenation):\n\n::: {#eca13017 .cell execution_count=10}\n``` {.python .cell-code}\nprefix = 'inflam_'\npatient_number = '001'\npatient_id = prefix + patient_number\nprint('Full patient ID:', patient_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFull patient ID: inflam_001\n```\n:::\n:::\n\n\n## Built-in Functions\n\nPython provides many built-in functions that perform common operations. We've already seen `print()` and `type()`. (Parentheses distinguish functions from variables.)\n\n### The print() Function\n\nThe `print()` function displays values:\n\n::: {#efa353e0 .cell execution_count=11}\n``` {.python .cell-code}\nprint('Hello, world!')\nprint('Patient weight:', 68.5, 'kg')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, world!\nPatient weight: 68.5 kg\n```\n:::\n:::\n\n\nYou can print multiple values by separating them with commas:\n\n::: {#3526b23f .cell execution_count=12}\n``` {.python .cell-code}\nweight_kg = 68.5\nweight_lb = 2.2 * weight_kg\nprint('Weight:', weight_kg, 'kg =', weight_lb, 'lbs')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWeight: 68.5 kg = 150.70000000000002 lbs\n```\n:::\n:::\n\n\n### Mathematical Operations\n\nPython supports common mathematical operations:\n\n::: {#843e4c6d .cell execution_count=13}\n``` {.python .cell-code}\n# Basic arithmetic\na = 10\nb = 3\n\nprint('Addition:', a + b)\nprint('Subtraction:', a - b)\nprint('Multiplication:', a * b)\nprint('Division:', a / b)\nprint('Integer division:', a // b)\nprint('Remainder:', a % b)\nprint('Power:', a ** b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddition: 13\nSubtraction: 7\nMultiplication: 30\nDivision: 3.3333333333333335\nInteger division: 3\nRemainder: 1\nPower: 1000\n```\n:::\n:::\n\n\n## Getting Help\n\nWhen you need help with Python, there are several ways to get information:\n\n### Using the help() Function\n\nThe `help()` function provides documentation about Python functions:\n\n::: {#2f6cd3e4 .cell execution_count=14}\n``` {.python .cell-code}\nhelp(print)\n```\n:::\n\n\nThis will display detailed information about the `print()` function, including its parameters and usage examples.\n\n### Other Ways to Get Help\n\n- **Online documentation**: The official Python documentation at [python.org](https://docs.python.org/)\n- **Stack Overflow**: A community-driven Q&A site where you can search for answers or ask questions\n- **Colleagues and mentors**: Don't hesitate to ask experienced programmers for help\n- **LLMs**: Modern generative AI tools like ChatGPT, Claude, and GitHub Copilot can be useful to explain code. (Note that AI tools are not perfect and may make mistakes, but they will usually get fundamental questions right.) \n\n## Practice Exercises\n\nLet's practice what we've learned with some exercises: \n\n::: {.callout-tip title=\"Pro Tip\"}\nTry to write the code by yourself before revealing the solution\n:::\n\n### Exercise 1: Variable Assignment\n\nCreate variables for a patient's information and display them:\n- name: Sarah Johnson\n- age: 34\n- height (cm): 165\n\n::: {#8a7c89a6 .cell execution_count=15}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\npatient_name = 'Sarah Johnson'\npatient_age = 34\npatient_height = 165.0  # in cm\n\nprint('Patient:', patient_name)\nprint('Age:', patient_age, 'years')\nprint('Height:', patient_height, 'cm')\n```\n:::\n\n\n### Exercise 2: Data Type Investigation\n\nWhat are the types of the following values?  \n- 3.25\n- 3\n- \"3.25\"\n\nUse the `type()` function to check:\n\n::: {#c582a519 .cell execution_count=16}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\nprint('Type of 3.25:', type(3.25)) # Expect float\nprint('Type of 3:', type(3)) # Expect int\nprint('Type of \"3.25\":', type('3.25')) # Expect str\n```\n:::\n\n\n### Exercise 3: Calculations\n\nA patient's body mass index (BMI) is calculated as weight (kg) divided by height (m) squared. Calculate a patient's BMI for the following values:\n\n- weight_kg = 70.0\n- height_cm = 175.0\n\n::: {#5a4bdbe8 .cell execution_count=17}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show the code\"}\n# Patient data\nweight_kg = 70.0\nheight_cm = 175.0\n\n# Convert height to meters\nheight_m = height_cm / 100\n\n# Calculate BMI\nbmi = weight_kg / (height_m ** 2)\n\nprint('Patient weight:', weight_kg, 'kg')\nprint('Patient height:', height_m, 'm')\nprint('Patient BMI:', round(bmi, 1))\n```\n:::\n\n\nThe expected outcome is **22.9**\n\n## Key Points\n\n- Use variables to store values and make calculations\n- Use `print(...)` to display values\n- Variables persist between cells\n- Variables must be created before they are used\n- Variables can be used in calculations\n- Use `type(...)` to determine the type of a value\n- Python is case-sensitive\n- Use `help(...)` to get help about functions\n\n## What's Next?\n\nNow that you understand Python fundamentals, you can explore:\n\n- Working with lists and data structures\n- Control flow with loops and conditionals  \n- Functions and modules\n- Working with data using libraries like pandas\n\nContinue practising these basics as they form the foundation for all Python programming!\n\n## Learning Resources\n\n- [The Python Tutorial](https://docs.python.org/3.12/tutorial/index.html)\n- [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/)\n- [Efficient Python for Data Scientists](https://khuyentran1401.github.io/Efficient_Python_tricks_and_tools_for_data_scientists/README.html)\n- [The Hitchhiker's Guide to Python](https://docs.python-guide.org/)\n\n",
    "supporting": [
      "coding-python_files"
    ],
    "filters": [],
    "includes": {}
  }
}