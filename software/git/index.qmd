---
title: "Git"
# Authors
# Authors are the main creators of the site's content, credited for their work and responsible for its core development, including writing and editing.
authors-ipa:
  - "[Niall Keleher](https://poverty-action.org/people/niall-keleher)"

# Contributors
# Contributors provide support, such as feedback or supplementary materials for the site. They can also be responsible for updating/maintaining the site.
# contributors:
#   - "[Contributor 1](https://poverty-action.org/people/contributor1_name)"
---

:::{.custom-summary-block}
Git is a distributed version control system that allows you to track changes in your
codebase. It is widely used in software development to manage code changes and
collaborate with other people working on or learning from the shared codebase.
:::

:::{.callout-note collapse="true"}
## Recognition and Attribution
This page modifies content from the [Software Carpentry Version Control with Git lesson](https://swcarpentry.github.io/git-novice/),  [Jenna Jordan's Intro to Git & GitHub (Speedrun edition)](https://jennajordan.me/git-novice-speedrun/), the [Carpentries Incubator Version Control with Git lesson](https://carpentries-incubator.github.io/git-novice-branch-pr/), and the [Library Carpentry Introduction to Git lesson](https://librarycarpentry.github.io/lc-git/).
:::

:::{.callout-tip appearance="simple"}
## Key Takeaways
* Version control helps track changes to files and projects
* Git and GitHub are not the same
* Git commands are written as `git verb options`
:::

Click on the image below to watch a video with an introduction to Git for beginners:

[![A brief introduction to Git for beginners](https://github.blog/wp-content/uploads/2024/05/GitHub-for-beginners.png?resize=1600%2C840)](https://youtu.be/r8jQ9hVA2qs)

## What is Version Control?

Version control is a name used for software which can help you record changes you make to the files in a directory on your computer. Version control software and tools (such as Git and Subversion/SVN) are often associated with software development, and increasingly, they are being used to collaborate in research and academic environments. Version control systems work best with plain text files such as documents or computer code, but modern version control systems can be used to track changes in most types of file.

At its most basic level, version control software helps us register and track sets of changes made to files on our computer. We can then reason about and share those changes with others. As we build up sets of changes over time, we begin to see some benefits.

### Benefits of using version control?

- **Collaboration** - Version control allows us to define formalized ways we can work together and share writing and code. For example merging together sets of changes from different parties enables co-creation of documents and software across distributed teams.
- **Versioning** - Having a robust and rigorous log of changes to a file, without renaming files (v1, v2, *final\_copy*)
- **Rolling Back** - Version control allows us to quickly undo a set of changes. This can be useful when new writing or new additions to code introduce problems.
- **Understanding** - Version control can help you understand how the code or writing came to be, who wrote or contributed particular parts, and who you might ask to help understand it better.
- **Backup** - While not meant to be a backup solution, using version control systems mean that your code and writing can be stored on multiple other computers.

There are many more reasons to use version control, and we'll explore some of these in the library context, but first let's learn a bit about a popular version control tool called Git.

[![Piled Higher and Deeper by Jorge Cham, http://www.phdcomics.com/comics/archive_print.php?comicid=1531](../../assets/images/git/phd101212s.png)](http://www.phdcomics.com)

"Piled Higher and Deeper" by Jorge Cham, http://www.phdcomics.com

## What is Git?

***Git*** is one of the most widely used version control systems in the world. It is a free, open source tool that can be downloaded to your local machine and used for logging all changes made to a group of designated computer files (referred to as a "git repository" or "repo" for short) over time. It can be used to control file versions locally by you alone on your computer, but is perhaps most powerful when employed to coordinate simultaneous work on a group of files shared among distributed groups of people.

Rather than emailing documents with tracked changes and some comments and renaming different versions of files (example.txt, exampleV2.txt, exampleV3.txt) to differentiate them, we can use Git to save (or in Git parlance, "commit") all that information with the document itself. This makes it easy to get an overview of all changes made to a file over time by looking at a log of all the changes that have been made. And all earlier versions of each file still remain in their original form: they are not overwritten, should we ever wish to "roll back" to them.

Git was originally developed to help software developers work collaboratively on software projects, but it can be and is used for managing revisions to any file type on a computer system, including text documents and spreadsheets. Once installed, interaction with Git is done through the Command Prompt in Windows, or the Terminal on Mac/Linux. Since Word documents contain special formatting, Git unfortunately cannot version control those, nor can it version control PDFs, though both file types can be stored in Git repositories.


### Visualizing Git

Version control systems start with a base version of the document and
then save just the changes you made at each step of the way. You can
think of it as a tape: if you rewind the tape and start at the base
document, then you can play back each change and end up with your
latest version.

![Changes Are Saved Sequentially](../../assets/images/git/play-changes.svg)

Once you think of changes as separate from the document itself, you
can then think about "playing back" different sets of changes onto the
base document and getting different versions of the document. For
example, two users can make independent sets of changes based on the
same document.

![Different Versions Can be Saved](../../assets/images/git/versions.svg)

Unless there are conflicts, you can even play two sets of changes onto the same base document.

![Multiple Versions Can be Merged](../../assets/images/git/merge.svg)

## Git terminology

One of the main barriers to getting started with Git is understanding the terminology necessary to executing commands. Although some of the language used in Git aligns with common-use words in English, other terms are not so clear. The best way to learn Git terminology - which consists of a number of verbs such as add, commit and push (preceded by the word 'git') - is to use it, which is what we will be doing during this lesson. We will explain these commands as we proceed from setting up a new version-controlled project to publishing our own website.

On a command line interface, Git commands are written as `git verb options`,
where `verb` is what we actually want to do and `options` is additional optional information which may be needed for the `verb`.

## How to install Git?

Install [Git for Windows](https://gitforwindows.org/) via `winget`. Git comes
pre-installed with MacOS and Linux, if you can't find it, try installing with Homebrew.

::: {.panel-tabset group="OS"}

# Windows

```bash
winget install Git.Git
```

# MacOS

```bash
# Git comes pre-installed with most MacOS distributions.
git --version
```

# Linux

```bash
# Git comes pre-installed with most Linux distributions.
git --version
```

:::

## Using Git

Git can be confusing and overwhelming. We recommend starting with a graphical user
interface (GUI) to help you understand the basics of Git. GitHub Desktop is a good
option or, if you use VS Code, you can use the built-in Git functionality (See
[VS Code documentation](https://code.visualstudio.com/docs/sourcecontrol/intro-to-git)).

Click on the image below to watch a video on basic Git commands:

[![Basic Git Commands](https://github.blog/wp-content/uploads/2024/05/GitHub-for-beginners.png?resize=1600%2C840)](https://youtu.be/rE2zRhZdjFU?si=8Mdt6BjH5F7truAq)

Here are the basic commands you need to know to get started with Git:

### `git init`

Create a new Git repository

```bash
git init
```

### `git clone`

Clone a repository into a new directory For example, to clone the IPA handbook
repository:

```bash
# If using HTTPS
git clone https://github.com/PovertyAction/ipa-data-tech-handbook.git

# If using SSH
git clone git@github.com:PovertyAction/ipa-data-tech-handbook.git
```

### `git checkout`

Branches are used to develop new code or modify existing code such that the "main" code
is not affected until the new code is ready. To create a new branch, use:

```bash
git checkout -b new-branch-name
```

This checks out a new branch called `new-branch-name`. To switch back to the main
branch, use:

```bash
git checkout main
```

To checkout a branch from the remote repository, use:

```bash
git fetch origin
git checkout --track origin/remote-branch-name
```

To push a branch to the remote repository, use:

```bash
git push origin new-branch-name
```

To delete a branch, use:

```bash
git branch -d new-branch-name
```

List all local branches:

```bash
git branch --list
```

### `git add`

Add files that have changed and are ready to be committed to the staging area. To add a
file, `file_name.md`, use:

```bash
git add file_name.md
```

### `git commit`

Commit changes to the checked out branch.

Good commit messages follow the following format:

```bash
git commit -m "<type>: <description>"
```

To commit changes with a message, use:

```bash
git commit -m "feat: adding new feature to the codebase"
```

### `git push`

Send changes to the remote repository. To push any commits to remote use the following:

```bash
git push origin new-branch-name
```

If you are pushing a new branch to the remote repository, use:

```bash
git push --set-upstream origin new-branch-name
```

Consider adding the
[Conventional Commits](https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits)
extension to your VS Code to help you write good commit messages.

## Best Practices

1. Always include a README file in your repository and keep it up to date with key
   information that anyone who visits your repository should know for using,
   replicating, or contributing to code in the repository.
1. Use branches to develop new features or fix bugs. This helps to keep the main branch
   clean and stable.
1. Write clear and concise commit messages. A good commit message should describe what
   changes were made and why they were made. Refer to
   [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/#summary) for
   good practice in writing commit messages.
1. Push changes to the remote repository frequently. This helps to keep your codebase up
   to date and allows others to collaborate with you.
1. Use pull requests to propose changes to the main branch. Try to keep the pull request
   small such that there is a manageable amount of code to review.

## Learning Resources

- GitHub's YouTube
  [Git for Beginners](https://www.youtube.com/playlist?list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f)
- GitHub's [Git Cheat Sheet](https://education.github.com/git-cheat-sheet-education.pdf)
- [git - the simple guide](https://rogerdudler.github.io/git-guide/)
- [Git Best Practices](https://sethrobertson.github.io/GitBestPractices/)
- [Happy Git with R](https://rogerdudler.github.io/git-guide/)
- [Visual Git Guide](https://marklodato.github.io/visual-git-guide/index-en.html)
- [Visualizing Git with D3](https://onlywei.github.io/explain-git-with-d3/)
