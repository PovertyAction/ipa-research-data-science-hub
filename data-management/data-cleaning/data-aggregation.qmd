---
title: "Data Aggregation"

#------------------------------------------------------------------
# Authors
#------------------------------------------------------------------
# Authors are the main creators of the site's content, credited
# for their work and responsible for its core development, 
# including writing and editing.
#------------------------------------------------------------------
authors-ipa:
  - "[Kayla Wilding](https://github.com/wildingka)"
  - "[Michael Rosenbaum](https://github.com/mfrosenbaum)"
  - "[Rosemarie Sandino](https://github.com/rsandino)"

#------------------------------------------------------------------
# Contributors
#------------------------------------------------------------------
# Contributors provide support, such as feedback or supplementary
# materials for the site. They can also be responsible for
# updating/maintaining the site.
#------------------------------------------------------------------
contributors:
  - "[Cristhian Pulido](https://poverty-action.org/people/cristhian-pulido)"
  - "[Wesley Kirui](https://poverty-action.org/people/wesley-kirui)"
---

:::{.custom-summary-block}
This article discusses merging and appending data, two widely used methods to combine datasets.
:::

:::{.callout-tip appearance="simple"}
## Key Takeaways
* There are two main approaches for data aggregation: Appending (for datasets with same variables but different observations) and Merging (for datasets with same observations but different variables)
* When exact matching isn't possible, there are (imperfect) fuzzy matching alternatives.
:::

## Appending data
If you have two files that contain the same variables, but different observations, you will most-likely want to append these two files to create a complete dataset. For example, if you have one dataset of adults and another with just children from your survey, or females in one file and males in another, you will append the two datasets into one. In appending datasets, it is important to pay attention to variable names and types.

1. Only variables with the exact same name in the two files will be appended on top of each other.
2. If you have a variable in one dataset (say you have "#\_of_children" in a females data set but not the males) and you append these, the variable will be in the joint dataset but all of the observations from the dataset without that variable will be missing (i.e. the value of #\_of_children for all males will be missing)
3. Variables you want to combine should be of the same general type (i.e. numeric or string)
     - If they are not, you will get an error and Stata will prompt you to use the `force` option
     - This option is not preferable. It will keep the type of your variable in the master data and replace your using observations for that variable as missing. 
     - Thus you should sort out whether they should be string or numeric ahead of time
 4. Combining string variables of different lengths (e.g. str5 and str10) will result in a string of the longer length of the two (e.g. str10).
 5. When combining different numeric types (e.g. float, double, int, byte) Stata will keep the more precise numeric type and will convert the variable of lower precision to the one of higher precision.

## Merging data

Sometimes, you may need to merge two or more datasets together, if they are split by variables and contain the same observations. For example, you may have variables that were split between two datasets by the survey program. Be sure that both datasets have a unique ID and be extra careful to specify whether the merge is one-to-one or one-to-many (although you will receive an error if you do the wrong merge type so you don't have to worry too much about this causes problems). You should also check that your two datasets do not have any variables with the same names. When you perform a merge, if you have the same variable in both datasets, Stata will automatically keep the master data as authority. You can change this assumption by using the `update` and/or `replace` options to use the using values. However, it probably makes more sense to rename one of the variables and keep both. 

### Many-to-many merge

A many-to-many merge is a really bad practice and should not be done. Many people think that a many-to-many merge will create all of the pairwise combinations of observations that match on each ID. If this is what you desire you should use `joinby`. Rather, a many-to-many merge pairs your two datasets by the way the observations are sorted within the id. So it matches the first observation in dataset 1 for person 1 with the first observation in dataset 2 for person 1 and so on. 

### Post merge

In a merge, each type of "match" is assigned a number (see `help merge` for the numeric codes assigned). After the merge, type `tab _merge` and check to see that the results (number of matches, number from master data only, number from using data only, updated missing values, and conflicting nonmissing values) were what you expected. Adding a few assertions after the merge is good practice to make sure things are running correctly. There are a couple other merge command options that try to build in more safety features for you. You should look at the documentation for both `safemerge` and `mmerge` for alternative merge methods. 

### Helpful options 

Options that are helpful to include are `assert`, `keep`, `keepusing`, `gen`, `nogen`. If you are not familiar with any of these see the `help merge` file. 

See the IPA Stata beginner’s training manual for step-by-step guidance on how to `merge` datasets. The IPA high intermediate Stata training also has a helpful module on merging, including a discussion of common pitfalls.


## Fuzzy Merge

Usually when you `merge`, you have a unique ID — or at least enough of one that you can salvage. Sometimes, however, no unique identifier was collected, and you’re left searching for alternative ways to link two datasets. The most obvious way to do this is to try and match on names or other string variables. However, this approach is often inaccurate: small misspellings in these variables can easily result in mismatches. For data where names are machine entered, removing obvious sources of mismatches (spaces, capital letters, etc.) may resolve this problem. Small numbers of mismatchs can be manually matching But in many cases the amount of data may make this impossible. Fuzzy merging, also called fuzzy matching, is a solution in that case. 

Fuzzy matching refers to the technique of finding strings that approximately match or are the most likely to be similar in two sets of comparisons, rather than exactly matching. Commands that use this type of algorithms will typically give out probabilities of matches and should only be used when exact matching is not an option. If you are thinking about using one of these commands, check with your manager to identify alternatives as fuzzy mergeing's match rate is usually much less than exact matching. Exact matching is almost always preferred if it's possible.

Usually fuzzy matching consists of three steps:
1. **String cleaning** -- prepare the match data by standardizing spaces, capitalization, removing special characters. Based on the data this can include common phrases such as titles (e.g. "Mrs.") in name.
2. **Probabilistic matching** -- the fuzzy matching function estimates a probability that an observation in the master data one matches to an observation in the using data.
3. **Matching review** -- matches need to be reviewed to decide the point (e.g. 0.2 Jaro-winkler distance) where the match is considered successful, after which records need to be manually matched. 

### Commands
There are a few commands that can help with fuzzy mergeing in Stata. All are user written and can be installed using `ssc install [command]` :

#### `reclink`
- Instead of a single unique ID, you specify one or more variables that `reclink` assess for similarity. For example, two numeric ages of 25 and 26 are a closer match than 35 and 65. `reclink` also supports string matching, so, for example, you can try using string variables in the linkage even if the variables aren’t perfectly clean. After `reclink` these values 
- `reclink` is has some well known issues: Previous RAs have run into the following issues. Each bullet below describes a problem along with the attempted solutions and whether they succeeded. 
	- The variable specified to `idusing()` should never be in the master dataset. If this is the case,` _merge match U*` should be right. 
	- `reclink` will not merge in values of shared variables from the using dataset without warning the user. The two datasets shouldn't share any variable names except for the variables for matching.
	- If `idusing()` and `idmaster()` have the same variable names, matches might not happen properly. When using reclink, tempfiles can be especially helpful, since you will likely need to be jumping back and forth between files to change variables names, and changing names simply for the period of matching might be one of the easiest ways of ensuring you’re preserving the original versions of variable names in your dataset.
- There is a second `reclink2` command that improves on the `reclink` command and adds many-to-one matching. This is installed by typing `net install dm0082` to install the entire package. 

#### `matchit`
- `matchit` only matches single variables to generate a probability score between those variables. You can match multiple columns sequentially and average or weight the probabilities to match on multiple string columns.
- `matchit` has multiple matching algorithms that are explained in the helpfile. All of these provide more than one likely match, which can be used to determine a second best guess.
- The results from `matchit` can be merged by `joinby` or `merge` to the using or master datasets, but `matchit` does not function like a merge. This is useful for most workflows.

#### `strgroup`
- You will need to type `net install strgroup` to get this command. This command calculates the difference between strings and uses a user-specified threshold to create groups/matches.
- `strgroup` works within a single dataset. Data preparation to create this usually involves joining a single master variable to the ID variables in the using dataset.

A number of other commands and approaches eist for this problem. This has been evaluated in the economics literature for historical record linkage. [Abramitzky et. al.](https://ranabr.people.stanford.edu/sites/g/files/sbiybj5391/f/linking_may2019.pdf) test multiple matching protocols and find that automated comparison techniques compare favorably to human matching in a variety of circumstances. Stata resources are included with the linked paper.